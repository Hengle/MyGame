local require = require
local print = print
local pairs = pairs
local loadstring = loadstring
local table = table

module("net_script")

local net = require "net"
local net_route = require "net_route"
local msg_pb = require "msg_pb"
local lua_pb =  require "lua_pb"

local scripts = {}


--[[请求执行一个服务器Lua函数]]
function RequestServerLuaFunc(name, param)
    
  local runLuaFuncReq = lua_pb.TMSG_LUA_RUN_FUNCB_REQ()
	runLuaFuncReq.funcname = name
	runLuaFuncReq.param = TableToString(param)
	net.SendMessage(net.Endpoint_Client, net.Endpoint_Zone, 0, msg_pb.MSG_LUA_RUN_FUNCB_REQ, runLuaFuncReq)
    
end

--[[注册一个可以被服务器调用的Lua函数]]
function Register(name, func)
	if func then
		scripts[name] = func
	end
end

--[[table转字符串]]
function TableToString(tb)
	local t = nil
	for k, v in pairs(tb) do
		if t == nil then
			t = {}
			table.insert(t, "{")
		else
			table.insert(t, ",")
		end
		table.insert(t, k)
		table.insert(t, "=")
		table.insert(t, v)
	end
	table.insert(t, "}")
	return table.concat(t)
end


--[[运行一个客户端函数]]
function OnMessageRunClientLuaFunc(msg)
		local func = scripts[msg.funcname]
		if func ~= nil then
			local param = loadstring(msg.param)()
			func(param)
		end
		
	end
end

-------------------------------------------------------------------
-- /// 注册消息
-------------------------------------------------------------------
local MessageTable = 
{
	{msg_pb.MSG_LUA_RUN_FUNCB_REQ , OnMessageRunClientLuaFunc, lua_pb.TMSG_LUA_RUN_FUNCB_REQ, },
}

net_route.RegisterMsgHandlers(MessageTable)





