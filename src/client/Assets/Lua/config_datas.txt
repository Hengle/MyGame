local print = print
local require = require
local ipairs = ipairs
local string = string
local log = require "log"

local IOSystem = CS.War.Script.IOSystem

module("config_datas")

local DATA_TABLE = {}

local function ParseConfigData(callback)
	IOSystem.LoadAssetBundleAllObjects("configs", function (...)
		for i, textAsset in ipairs({...}) do
			local moduleName, className = string.match(textAsset.name, "([^ ]+)%.([^ ]+)")
			local tableClassName = className.."Table"
			
			local m = require(moduleName.."_pb")
			local tableClass = m[tableClassName]
			if tableClass == nil then
				log.ErrorFormat("没有对应的类: {0}_pb.{1} !请删除\"Configs/{2}.bytes\"文件", moduleName, className, textAsset.name)
			else
				local tableDescriptor = m[string.upper(tableClassName)]
				if tableDescriptor.fields == nil then
					log.ErrorFormat("数据表错误: {0}_pb.{1} !请检查对应Excel文件", moduleName, className)
				else
					local text = textAsset.bytes
					local tableIns = tableClass()
                    
                    --log.WarningFormat("开始加载表格: {0}_pb.{1} !", moduleName, className)
                    
					tableIns:ParseFromString(text)
					
					local rowName = m[string.upper(tableClassName)].fields[1].name
				
					local class = m[className]
					local keyName = m[string.upper(className)].fields[1].name
					local dataMap = {}
					for i, data in ipairs(tableIns[rowName]) do
						local key = data[keyName]
						dataMap[key] = data
					end

					DATA_TABLE[class] = dataMap
				end
			end
		end
		
		callback()
		
		IOSystem.UnloadAssetBundle("configs")
	end)
end

function InitConfigData(callback)
	ParseConfigData(callback)
end

function GetDataByType(cls, id)
	return DATA_TABLE[cls][id]
end

function GetDataByName(moduleName, className, id)
	local m = require(moduleName)
	local classType = m[className]
	return GetDataByType(classType, id)
end

function GetAllData(moduleName,className)
	local m = require(moduleName)
	local classType = m[className]
	return DATA_TABLE[classType]
end

function GetEffectPathByID(id) -- 获取客户端光效ID
    
    local effect = GetDataByName("effect_pb", "Effects", id)
    local effectpath = effect.path
    local lang = require "lang"
    if lang.USE_LANG == "zh" then
        if effect.pathex ~= nil and effect.pathex ~= "" then
            effectpath = effect.pathex
        end
    end
    
    return effectpath
    
end